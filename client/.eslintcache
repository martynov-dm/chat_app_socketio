[{"/home/dmitrii/github_repos/slack-copy/client/src/index.tsx":"1","/home/dmitrii/github_repos/slack-copy/client/src/reportWebVitals.ts":"2","/home/dmitrii/github_repos/slack-copy/client/src/App.tsx":"3","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/Sidebar.tsx":"4","/home/dmitrii/github_repos/slack-copy/client/src/components/MainWindow/MainWindow.tsx":"5","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/Description/Channels.tsx":"6","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/RoomList/RoomList.tsx":"7","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/CreateServer/CreateServer.tsx":"8","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/RoomList/RoomItem.tsx":"9","/home/dmitrii/github_repos/slack-copy/client/src/components/MainWindow/MessageList/MessageList.tsx":"10","/home/dmitrii/github_repos/slack-copy/client/src/components/MainWindow/MessageList/MessageItem.tsx":"11","/home/dmitrii/github_repos/slack-copy/client/src/components/common/ThemeToggler.tsx":"12","/home/dmitrii/github_repos/slack-copy/client/src/api/api.ts":"13","/home/dmitrii/github_repos/slack-copy/client/src/redux/auth/auth.actions.ts":"14","/home/dmitrii/github_repos/slack-copy/client/src/redux/store.ts":"15","/home/dmitrii/github_repos/slack-copy/client/src/redux/root-reducer.ts":"16","/home/dmitrii/github_repos/slack-copy/client/src/redux/root-saga.ts":"17","/home/dmitrii/github_repos/slack-copy/client/src/redux/auth/auth.sagas.ts":"18","/home/dmitrii/github_repos/slack-copy/client/src/components/ImageCropper/ImageCropper.tsx":"19","/home/dmitrii/github_repos/slack-copy/client/src/components/ImageCropper/cropImage.ts":"20","/home/dmitrii/github_repos/slack-copy/client/src/redux/auth/auth.reducer.ts":"21","/home/dmitrii/github_repos/slack-copy/client/src/redux/auth/auth.selectors.ts":"22","/home/dmitrii/github_repos/slack-copy/client/src/components/common/ErrorPopUp.tsx":"23","/home/dmitrii/github_repos/slack-copy/client/src/pages/Main.tsx":"24","/home/dmitrii/github_repos/slack-copy/client/src/pages/SignUp.tsx":"25","/home/dmitrii/github_repos/slack-copy/client/src/pages/SignIn.tsx":"26","/home/dmitrii/github_repos/slack-copy/client/src/components/SidebarHeader/SidebarHeader.tsx":"27","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/UserMenu/UserMenu.tsx":"28","/home/dmitrii/github_repos/slack-copy/client/src/socket.io/socket.tsx":"29","/home/dmitrii/github_repos/slack-copy/client/src/components/ServersList/ServersList.tsx":"30","/home/dmitrii/github_repos/slack-copy/client/src/components/ServersList/ServerItem/ServerItem.tsx":"31","/home/dmitrii/github_repos/slack-copy/client/src/components/MainWindow/MessageInput/MessageInput.tsx":"32","/home/dmitrii/github_repos/slack-copy/client/src/redux/serverRoomMessage/serverRoomMessage.reducer.ts":"33","/home/dmitrii/github_repos/slack-copy/client/src/redux/serverRoomMessage/serverRoomMessage.actions.ts":"34","/home/dmitrii/github_repos/slack-copy/client/src/redux/serverRoomMessage/serverRoomMessage.selectors.ts":"35","/home/dmitrii/github_repos/slack-copy/client/src/components/RoomHeader/RoomHeader.tsx":"36","/home/dmitrii/github_repos/slack-copy/client/src/redux/serverRoomMessage/utils.ts":"37","/home/dmitrii/github_repos/slack-copy/client/src/components/Drawer/Drawer.tsx":"38","/home/dmitrii/github_repos/slack-copy/client/src/components/common/Modal.tsx":"39"},{"size":741,"mtime":1609248425190,"results":"40","hashOfConfig":"41"},{"size":425,"mtime":1608036149411,"results":"42","hashOfConfig":"41"},{"size":979,"mtime":1609784059027,"results":"43","hashOfConfig":"41"},{"size":1807,"mtime":1610303667782,"results":"44","hashOfConfig":"41"},{"size":699,"mtime":1610091128571,"results":"45","hashOfConfig":"41"},{"size":690,"mtime":1608486839070,"results":"46","hashOfConfig":"41"},{"size":733,"mtime":1610097560841,"results":"47","hashOfConfig":"41"},{"size":777,"mtime":1608642400529,"results":"48","hashOfConfig":"41"},{"size":1227,"mtime":1610097911881,"results":"49","hashOfConfig":"41"},{"size":982,"mtime":1609845323000,"results":"50","hashOfConfig":"41"},{"size":2037,"mtime":1610102206601,"results":"51","hashOfConfig":"41"},{"size":802,"mtime":1610112585921,"results":"52","hashOfConfig":"41"},{"size":790,"mtime":1609140554410,"results":"53","hashOfConfig":"41"},{"size":1302,"mtime":1610192942220,"results":"54","hashOfConfig":"41"},{"size":1033,"mtime":1609059307470,"results":"55","hashOfConfig":"41"},{"size":433,"mtime":1609661302675,"results":"56","hashOfConfig":"41"},{"size":175,"mtime":1608713974353,"results":"57","hashOfConfig":"41"},{"size":1439,"mtime":1609823484290,"results":"58","hashOfConfig":"41"},{"size":2486,"mtime":1609080441030,"results":"59","hashOfConfig":"41"},{"size":1139,"mtime":1609051398130,"results":"60","hashOfConfig":"41"},{"size":2351,"mtime":1610258565632,"results":"61","hashOfConfig":"41"},{"size":1355,"mtime":1610257738902,"results":"62","hashOfConfig":"41"},{"size":898,"mtime":1609142163340,"results":"63","hashOfConfig":"41"},{"size":1144,"mtime":1610190389940,"results":"64","hashOfConfig":"41"},{"size":8562,"mtime":1609953096410,"results":"65","hashOfConfig":"41"},{"size":3706,"mtime":1609952986640,"results":"66","hashOfConfig":"41"},{"size":3083,"mtime":1610091628841,"results":"67","hashOfConfig":"41"},{"size":720,"mtime":1610100219051,"results":"68","hashOfConfig":"41"},{"size":3718,"mtime":1610291456062,"results":"69","hashOfConfig":"41"},{"size":882,"mtime":1610103145421,"results":"70","hashOfConfig":"41"},{"size":700,"mtime":1610112504931,"results":"71","hashOfConfig":"41"},{"size":2032,"mtime":1610112671031,"results":"72","hashOfConfig":"41"},{"size":2076,"mtime":1609846966590,"results":"73","hashOfConfig":"41"},{"size":1385,"mtime":1610187840490,"results":"74","hashOfConfig":"41"},{"size":1974,"mtime":1610290360602,"results":"75","hashOfConfig":"41"},{"size":5805,"mtime":1610112616541,"results":"76","hashOfConfig":"41"},{"size":288,"mtime":1609763468147,"results":"77","hashOfConfig":"41"},{"size":3716,"mtime":1610303377812,"results":"78","hashOfConfig":"41"},{"size":1271,"mtime":1610303667832,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"gp4d3u",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"82"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"/home/dmitrii/github_repos/slack-copy/client/src/index.tsx",[],["174","175"],"/home/dmitrii/github_repos/slack-copy/client/src/reportWebVitals.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/App.tsx",["176"],"import React from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { ConnectedRouter } from 'connected-react-router'\nimport Main from './pages/Main'\nimport SignUp from './pages/SignUp'\nimport { history } from './redux/store'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport SignIn from './pages/SignIn'\nimport { SocketProvider } from './socket.io/socket'\n\nconst App: React.FC = () => {\n  return (\n    <ChakraProvider>\n      <ConnectedRouter history={history}>\n        <SocketProvider>\n          <Route\n            exact\n            path='/'\n            render={() => {\n              const token = sessionStorage.getItem('token')\n              return !token ? <Redirect to='/sign-in' /> : <Main />\n            }}\n          />\n          <Route exact path='/sign-in' component={SignIn} />\n          <Route exact path='/sign-up' component={SignUp} />\n        </SocketProvider>\n      </ConnectedRouter>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/Sidebar.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/MainWindow/MainWindow.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/Description/Channels.tsx",[],["177","178"],"/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/RoomList/RoomList.tsx",["179"],"import React from 'react'\nimport RoomItem from './RoomItem'\nimport { css } from '@emotion/react'\nimport { useSelector } from 'react-redux'\nimport { selectRoomsArr } from '../../../redux/serverRoomMessage/serverRoomMessage.selectors'\nimport { useColorModeValue } from '@chakra-ui/react'\n\nconst RoomList = () => {\n  const currentRoomsArr = useSelector(selectRoomsArr)\n\n  return (\n    <section\n      css={css`\n        display: flex;\n        flex-direction: column;\n        margin-left: 2rem;\n        margin-top: 1rem;\n      `}\n    >\n      {currentRoomsArr &&\n        currentRoomsArr.map((room) => (\n          <RoomItem key={room._id} roomId={room._id} title={room.roomTitle} />\n        ))}\n    </section>\n  )\n}\n\nexport default RoomList\n","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/CreateServer/CreateServer.tsx",[],["180","181"],"/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/RoomList/RoomItem.tsx",["182","183"],"import React, { useContext } from 'react'\nimport { css } from '@emotion/react'\nimport { Flex, Text, useColorModeValue } from '@chakra-ui/react'\nimport { useSelector } from 'react-redux'\nimport { FaSlackHash } from 'react-icons/fa'\nimport { Icon } from '@chakra-ui/react'\n\nimport { selectUserId } from '../../../redux/auth/auth.selectors'\nimport { SocketContext } from '../../../socket.io/socket'\n\ninterface Iprops {\n  title: string\n  roomId: string\n}\n\nconst RoomItem: React.FC<Iprops> = (props) => {\n  const { title, roomId } = props\n  const ws = useContext(SocketContext)\n  const hoverColor = useColorModeValue('#F7FAFC', '#4A5568')\n  // const bgColor = useColorModeValue('#EDF2F7', '#2D3748')\n  return (\n    <>\n      <Flex\n        mr='0.2rem'\n        p='0.2rem'\n        borderRadius='lg'\n        onClick={() => {\n          ws.joinRoom(roomId)\n        }}\n        my='0.3rem'\n        align='center'\n        justify='evenly'\n        css={css`\n          cursor: pointer;\n          &:hover {\n            background-color: ${hoverColor};\n          }\n        `}\n      >\n        <Icon as={FaSlackHash} />\n        <Text fontSize='lg' ml='0.7rem'>\n          {title}\n        </Text>\n      </Flex>\n    </>\n  )\n}\n\nexport default RoomItem\n","/home/dmitrii/github_repos/slack-copy/client/src/components/MainWindow/MessageList/MessageList.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/MainWindow/MessageList/MessageItem.tsx",["184"],"import { Avatar, Box, Heading, Image, Text } from '@chakra-ui/react'\nimport { css } from '@emotion/react'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectUserLogin } from '../../../redux/auth/auth.selectors'\n\ninterface Iprops {\n  avatar: string\n  username: string\n  time: Date | string\n  text: string\n}\n\nconst MessageItem = (props: Iprops) => {\n  const { avatar, username, time, text } = props\n  const convertedDate = new Date(time).toLocaleString()\n  const currentUserLogin = useSelector(selectUserLogin)\n\n  return (\n    <Box\n      boxShadow='base'\n      borderWidth='1px'\n      borderRadius='lg'\n      maxWidth={{ md: '22rem', lg: '35rem' }}\n      my='0.7rem'\n      css={css`\n        padding: 0.8rem 0.3rem;\n        display: flex;\n        width: 100%;\n        height: auto;\n\n        /* min-height: 4.5rem; */\n        align-self: ${currentUserLogin === username\n          ? 'flex-end'\n          : 'flex-start'};\n        align-items: center;\n\n        .text {\n          margin-left: 1rem;\n          display: flex;\n          flex-direction: column;\n\n          .message {\n            line-height: 1.4rem;\n            white-space: pre-wrap;\n            font-size: 1.1rem;\n            display: inline-block;\n            word-break: break-word;\n          }\n\n          .name-date {\n            display: flex;\n            align-items: center;\n            justify-content: flex-start;\n            margin-bottom: 0.3rem;\n\n            .date {\n              margin-left: 0.7rem;\n              font-size: 0.8rem;\n            }\n          }\n        }\n      `}\n    >\n      <Box ml='1rem'>\n        <Avatar width='3rem' borderRadius='50%' src={avatar} alt='ava' />\n      </Box>\n      <div className='text'>\n        <div className='name-date'>\n          <Heading as='h5' size='sm' className='name'>\n            {username}\n          </Heading>\n          <Text className='date'>{convertedDate}</Text>\n        </div>\n\n        <Text className='message'>{text}</Text>\n      </div>\n    </Box>\n  )\n}\n\nexport default MessageItem\n",["185","186"],"/home/dmitrii/github_repos/slack-copy/client/src/components/common/ThemeToggler.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/api/api.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/redux/auth/auth.actions.ts",["187"],"import { InferActionTypes, ILoginAndPassword, IUser } from './../../types/types'\nimport { ILoginPasswordAvatar } from '../../types/types'\n\nexport type AuthActionTypes = InferActionTypes<typeof authActions>\n\nexport const authActions = {\n  signUpStart: (loginPasswordAvatar: ILoginPasswordAvatar) => {\n    return {\n      type: 'SIGN_UP_START',\n      payload: loginPasswordAvatar,\n    } as const\n  },\n  signUpSuccess: () => {\n    return {\n      type: 'SIGN_UP_SUCCESS',\n    } as const\n  },\n  signUpFailure: (errorMessage: string) => {\n    return {\n      type: 'SIGN_UP_FAILURE',\n      payload: errorMessage,\n    } as const\n  },\n  signUpClear: () => {\n    return {\n      type: 'SIGN_UP_CLEAR',\n    } as const\n  },\n  signInStart: (loginAndPassword: ILoginAndPassword) => {\n    return {\n      type: 'SIGN_IN_START',\n      payload: loginAndPassword,\n    } as const\n  },\n  signInSuccess: () => {\n    return {\n      type: 'SIGN_IN_SUCCESS',\n    } as const\n  },\n  signInFailure: (errorMessage: string) => {\n    return {\n      type: 'SIGN_IN_FAILURE',\n      payload: errorMessage,\n    } as const\n  },\n  signInClear: () => {\n    return {\n      type: 'SIGN_IN_CLEAR',\n    } as const\n  },\n  addUserData: (userData: IUser) => {\n    return {\n      type: 'ADD_USER_DATA',\n      payload: userData,\n    } as const\n  },\n}\n","/home/dmitrii/github_repos/slack-copy/client/src/redux/store.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/redux/root-reducer.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/redux/root-saga.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/redux/auth/auth.sagas.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/ImageCropper/ImageCropper.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/ImageCropper/cropImage.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/redux/auth/auth.reducer.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/redux/auth/auth.selectors.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/common/ErrorPopUp.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/pages/Main.tsx",["188"],"import React, { useContext, useEffect } from 'react'\nimport MainWindow from '../components/MainWindow/MainWindow'\nimport Sidebar from '../components/Sidebar/Sidebar'\nimport { css } from '@emotion/react'\nimport SidebarHeader from '../components/SidebarHeader/SidebarHeader'\nimport RoomHeader from '../components/RoomHeader/RoomHeader'\nimport { SocketContext } from '../socket.io/socket'\nimport ServersList from '../components/ServersList/ServersList'\nimport { useBreakpointValue } from '@chakra-ui/react'\n\nconst Main: React.FC = () => {\n  const ws = useContext(SocketContext)\n  const variant = useBreakpointValue({\n    base: '0 0 1fr',\n    md: 'minmax(5.5rem, 5%) minmax(14rem, 14%) 1fr',\n  })\n  useEffect(() => {\n    ws.auth()\n  }, [])\n\n  return (\n    <main\n      css={css`\n        margin: auto;\n        width: 100vw;\n        height: 100vh;\n        overflow: hidden;\n        display: grid;\n        grid-template-columns: ${variant};\n        grid-template-rows: minmax(3rem, 6%) 1fr;\n      `}\n    >\n      <ServersList />\n      <SidebarHeader />\n      <Sidebar />\n\n      <RoomHeader />\n      <MainWindow />\n    </main>\n  )\n}\n\nexport default Main\n","/home/dmitrii/github_repos/slack-copy/client/src/pages/SignUp.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/pages/SignIn.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/SidebarHeader/SidebarHeader.tsx",["189"],"import React from 'react'\nimport { css } from '@emotion/react'\nimport { Heading, Text, useColorModeValue } from '@chakra-ui/react'\nimport { useSelector } from 'react-redux'\nimport { selectCurrentServerTitle } from '../../redux/serverRoomMessage/serverRoomMessage.selectors'\n\nconst SidebarHeader = (props: any) => {\n  const bgColor = useColorModeValue('#EDF2F7', '#2D3748')\n  const serverTitle = useSelector(selectCurrentServerTitle)\n\n  return (\n    <header\n      css={css`\n        width: 100%;\n        grid-column: 2/3;\n        grid-row: 1/2;\n\n        background-color: ${bgColor};\n\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        &:after {\n          display: block;\n          content: '.';\n          font-size: 0;\n          color: transparent;\n          height: 7px;\n          width: 100%;\n          padding-left: 4px;\n          position: absolute;\n          bottom: -7px;\n\n          /* background: ${bgColor}; */\n          box-shadow: inset 0px 7px 6px -6px rgba(0, 0, 0, 0.25);\n        }\n      `}\n    >\n      <div>\n        <Heading as='h4' size='md'>\n          {serverTitle}\n        </Heading>\n      </div>\n    </header>\n  )\n}\n\nexport default SidebarHeader\n\n// import React from 'react'\n// import styled from 'styled-components'\n// import { BsFillPeopleFill } from 'react-icons/bs'\n// import { css } from '@emotion/react'\n// import ThemeToggler from '../../common/ThemeToggler'\n\n// const RoomTitleStyles = styled.div`\n//   font-size: 1.38rem;\n//   color: rgba(23, 26, 42, 0.7);\n//   justify-self: end;\n// `\n// const RoomPeopleStyles = styled.button`\n//   width: 3.3rem;\n//   height: 2.2rem;\n//   display: flex;\n//   align-items: center;\n//   justify-content: space-between;\n//   color: rgba(23, 26, 42, 0.7);\n//   background-color: #fff;\n\n//   svg {\n//     fill: rgba(23, 26, 42, 0.7);\n\n//     width: 1.2rem;\n//     height: 1.2rem;\n//   }\n// `\n\n// const RoomHeader = () => {\n//   return (\n//     <header\n//       css={css`\n//         box-shadow: 0px 7px 16px 0px rgba(0, 0, 0, 0.71);\n//         display: flex;\n//         align-items: center;\n//         justify-content: center;\n//         padding: 0.62rem;\n//         height: 4.8rem;\n//         width: 100%;\n//       `}\n//     >\n//       <div style={{ flexGrow: 1 }}></div>\n//       <RoomTitleStyles>\n//         <h1># general</h1>\n//       </RoomTitleStyles>\n//       <div style={{ flexGrow: 1 }}></div>\n\n//       <ThemeToggler />\n//     </header>\n//   )\n// }\n\n// export default RoomHeader\n\n// import React from 'react'\n// import { css } from '@emotion/react'\n\n// const UserHeader: React.FC = () => {\n//   return (\n//     <header\n//       css={css`\n//         box-shadow: 0px 7px 16px 0px rgba(0, 0, 0, 0.71);\n//         z-index: 1;\n//         display: flex;\n//         align-items: center;\n//         padding: 1rem;\n//         height: 4.8rem;\n//         color: rgba(23, 26, 42, 0.7);\n//         font-weight: normal;\n//       `}\n//     >\n//       <div>\n//         <h3>Dmitrii</h3>\n//       </div>\n//     </header>\n//   )\n// }\n\n// export default UserHeader\n","/home/dmitrii/github_repos/slack-copy/client/src/components/Sidebar/UserMenu/UserMenu.tsx",["190"],"import { Avatar, Flex, Heading, useColorModeValue } from '@chakra-ui/react'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { css } from '@emotion/react'\n\nimport {\n  selectUserLogin,\n  selectUserAvatar,\n} from '../../../redux/auth/auth.selectors'\n\nconst UserMenu = (props: any) => {\n  const bgColor = useColorModeValue('gray.200', 'gray.800')\n  const login = useSelector(selectUserLogin)\n  const avatar = useSelector(selectUserAvatar)\n\n  return (\n    <Flex mt='auto' shrink={1} h='4rem' bg={bgColor} align='center'>\n      <Avatar ml='1.5rem' name={login} src={avatar} />\n      <Heading ml='1.5rem' as='h4' size='md'>\n        {login}\n      </Heading>\n    </Flex>\n  )\n}\n\nexport default UserMenu\n","/home/dmitrii/github_repos/slack-copy/client/src/socket.io/socket.tsx",["191","192"],"import React, { createContext } from 'react'\nimport socketIOClient, { Socket } from 'socket.io-client'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push } from 'connected-react-router'\n\nimport { IMessage, IRoomData, IServerData, IUser } from '../types/types'\nimport { serverRoomMessageActions } from '../redux/serverRoomMessage/serverRoomMessage.actions'\nimport { authActions } from '../redux/auth/auth.actions'\n\nexport const SocketContext = createContext(null as any)\n\ninterface Iprops {\n  children: React.ReactNode\n}\n\nlet socket: Socket\nlet ws\nlet userDataFromServer: IUser\n\nexport const SocketProvider = (props: Iprops) => {\n  const { children } = props\n  const INITIAL_SERVER_ENDPOINT = '/default'\n\n  // let nsSocket: Socket\n\n  const dispatch = useDispatch()\n\n  const initialize = () => {\n    socket.on('currentServerData', (currentServerData: IServerData) => {\n      dispatch(serverRoomMessageActions.setCurrentServer(currentServerData))\n    })\n\n    socket.on('currentServerRoomsArr', (currentServerRoomsArr: IRoomData[]) => {\n      dispatch(\n        serverRoomMessageActions.setCurrentServerRoomsArr(currentServerRoomsArr)\n      )\n    })\n\n    socket.on('savedMessage', (newMessage: IMessage) => {\n      dispatch(serverRoomMessageActions.addNewMessage(newMessage))\n    })\n\n    socket.on('currentRoomData', (roomData: IRoomData) => {\n      dispatch(serverRoomMessageActions.setCurrentRoomData(roomData))\n    })\n\n    socket.on('usersUpdate', (users: IUser[]) => {\n      dispatch(serverRoomMessageActions.setUsers(users))\n    })\n\n    socket.on('currentRoomMessages', (messages: IMessage[]) => {\n      dispatch(serverRoomMessageActions.setMessages(messages))\n    })\n\n    // socket.on('currentServerData', (currentServerData: IServerData) => {\n    //   dispatch(serversActions.updateCurrentServer(currentServerData))\n    //   dispatch(roomsActions.updateCurrentRoom(currentServerData.rooms[0]))\n    // })\n\n    // if (!currentServer) {\n    //   joinNs('/wiki')\n    // } else {\n    //   joinNs(currentServer)\n    // }\n  }\n\n  const auth = () => {\n    const token = sessionStorage.getItem('token')\n    socket = socketIOClient.io('http://localhost:5000/')\n    socket.emit('authenticate', token)\n\n    socket.on(\n      'authorized',\n      ({\n        serversArr,\n        userData,\n      }: {\n        serversArr: IServerData[]\n        userData: IUser\n      }) => {\n        userDataFromServer = userData\n        dispatch(serverRoomMessageActions.setServersArr(serversArr))\n        dispatch(authActions.setUserData(userData))\n\n        const endpoint =\n          userData.currentServerEndpoint || INITIAL_SERVER_ENDPOINT\n\n        joinServer(endpoint)\n      }\n    )\n\n    socket.on('not authorized', () => {\n      dispatch(push('/sign-in'))\n    })\n  }\n\n  const joinServer = (endpoint: string) => {\n    if (socket) {\n      socket.disconnect()\n    }\n\n    socket = socketIOClient.io(`http://localhost:5000${endpoint}`)\n\n    initialize()\n  }\n\n  const joinRoom = (newRoomId: string) => {\n    socket.emit(\n      'changeRoom',\n\n      newRoomId\n    )\n    // dispatch(roomsActions.updateCurrentRoomName(roomName))\n\n    // socket.on('updateMembers', (usersInARoom: any) =>\n    //   dispatch(roomsActions.updatePeopleCount(usersInARoom))\n    // )\n\n    // socket.on('historyCatchUp', (history: any) => {\n    //   dispatch(messagesActions.addHistory(history))\n    //   // console.log(history)\n    // })\n  }\n\n  const sendMessage = (message: string, userId: string, roomId: string) => {\n    socket.emit('newMessageToServer', { message, userId, roomId })\n  }\n\n  ws = {\n    sendMessage,\n    initialize,\n    joinServer,\n    joinRoom,\n    auth,\n  }\n\n  return <SocketContext.Provider value={ws}>{children}</SocketContext.Provider>\n}\n","/home/dmitrii/github_repos/slack-copy/client/src/components/ServersList/ServersList.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/ServersList/ServerItem/ServerItem.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/MainWindow/MessageInput/MessageInput.tsx",[],"/home/dmitrii/github_repos/slack-copy/client/src/redux/serverRoomMessage/serverRoomMessage.reducer.ts",["193"],"import { IRoomData, IUser } from './../../types/types'\nimport { IServerData } from '../../types/types'\nimport { IMessage } from '../../types/types'\nimport { serverRoomMessageActionsTypes } from './serverRoomMessage.actions'\nimport { removeUserFromArr } from './utils'\n\nconst INITIAL_STATE = {\n  servers: {\n    serversArr: [] as IServerData[],\n    currentServer: {} as IServerData,\n  },\n  rooms: {\n    roomsArr: [] as IRoomData[],\n    currentRoomData: {} as IRoomData,\n    usersInCurrentRoom: [] as IUser[],\n  },\n\n  messages: {\n    messagesArr: [] as IMessage[],\n  },\n}\n\nexport type InitialStateType = typeof INITIAL_STATE\n\nconst serverRoomMessageReducer = (\n  state = INITIAL_STATE,\n  action: serverRoomMessageActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_INITIAL_SERVERS_ARR':\n      return {\n        ...state,\n        servers: {\n          ...state.servers,\n          serversArr: action.payload,\n        },\n      }\n    case 'SET_CURRENT_SERVER_DATA':\n      return {\n        ...state,\n        servers: {\n          ...state.servers,\n          currentServer: action.payload,\n        },\n      }\n    case 'SET_CURRENT_SERVER_ROOMS_ARR':\n      return {\n        ...state,\n        rooms: {\n          ...state.rooms,\n          roomsArr: action.payload,\n        },\n      }\n    case 'SET_CURRENT_ROOM_DATA':\n      return {\n        ...state,\n        rooms: {\n          ...state.rooms,\n          currentRoomData: action.payload,\n        },\n      }\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: {\n          ...state.messages,\n          messagesArr: action.payload,\n        },\n      }\n\n    case 'ADD_NEW_MESSAGE':\n      return {\n        ...state,\n        messages: {\n          ...state.messages,\n          messagesArr: [...state.messages.messagesArr, action.payload],\n        },\n      }\n    case 'SET_USERS':\n      return {\n        ...state,\n        rooms: {\n          ...state.rooms,\n          usersInCurrentRoom: action.payload,\n        },\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default serverRoomMessageReducer\n","/home/dmitrii/github_repos/slack-copy/client/src/redux/serverRoomMessage/serverRoomMessage.actions.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/redux/serverRoomMessage/serverRoomMessage.selectors.ts",[],"/home/dmitrii/github_repos/slack-copy/client/src/components/RoomHeader/RoomHeader.tsx",["194"],"import React from 'react'\nimport { css } from '@emotion/react'\nimport ThemeToggler from '../common/ThemeToggler'\nimport {\n  Avatar,\n  Flex,\n  Heading,\n  IconButton,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverHeader,\n  PopoverTrigger,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from '@chakra-ui/react'\nimport { Icon } from '@chakra-ui/react'\nimport { BsFillPeopleFill } from 'react-icons/bs'\nimport { useSelector } from 'react-redux'\nimport { HamburgerIcon } from '@chakra-ui/icons'\nimport {\n  selectCurrentRoomName,\n  selectCurrentRoomUserCount,\n  selectUsersArr,\n} from '../../redux/serverRoomMessage/serverRoomMessage.selectors'\nimport Drawer from '../Drawer/Drawer'\nimport { useMediaQuery } from '@material-ui/core'\n\nconst RoomHeader = (props: any) => {\n  const bgColor = useColorModeValue('#EDF2F7', '#2D3748')\n  const userCount = useSelector(selectCurrentRoomUserCount)\n  const currentRoomName = useSelector(selectCurrentRoomName)\n  const usersList = useSelector(selectUsersArr)\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef(null)\n  const isLessThan767px = useMediaQuery('(max-width: 767px)')\n\n  return (\n    <header\n      css={css`\n        grid-column: 3/4;\n        grid-row: 1/2;\n\n        position: relative;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        /* justify-content: center; */\n\n        z-index: 1;\n\n        background-color: ${bgColor};\n        &:after {\n          display: block;\n          content: '.';\n          font-size: 0;\n          color: transparent;\n          height: 7px;\n          width: 100%;\n          padding-left: 4px;\n          position: absolute;\n          bottom: -7px;\n\n          box-shadow: inset 0px 7px 6px -6px rgba(0, 0, 0, 0.25);\n        }\n      `}\n    >\n      {isLessThan767px && (\n        <>\n          <Drawer\n            btnRef={btnRef}\n            isOpen={isOpen}\n            onOpen={onOpen}\n            onClose={onClose}\n          />\n          <IconButton\n            ref={btnRef}\n            onClick={onOpen}\n            ml='2rem'\n            aria-label='Toggle day/night'\n            icon={\n              <HamburgerIcon\n                w='1.6rem'\n                h='1.6rem'\n                css={css`\n                  opacity: 1;\n                `}\n              />\n            }\n            variant='ghost'\n          />\n        </>\n      )}\n\n      <Heading\n        as='h4'\n        size='md'\n        css={css`\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n        `}\n      >\n        {currentRoomName}\n      </Heading>\n      <ThemeToggler />\n\n      <Popover>\n        <PopoverTrigger>\n          <IconButton\n            css={css`\n              &:hover {\n                opacity: 0.8;\n              }\n            `}\n            mr='2rem'\n            aria-label='Toggle day/night'\n            icon={\n              <>\n                <Icon h='1.6rem' w='1.6rem' as={BsFillPeopleFill} />\n                <Text ml='0.2rem' fontSize='xl'>\n                  {userCount}\n                </Text>\n              </>\n            }\n            variant='ghost'\n          />\n        </PopoverTrigger>\n        <PopoverContent>\n          <PopoverArrow />\n          <PopoverCloseButton />\n          <PopoverHeader>Users list</PopoverHeader>\n          {usersList.map((user) => {\n            return (\n              <PopoverBody\n                key={user._id}\n                css={css`\n                  display: flex;\n                  align-items: center;\n                `}\n              >\n                <Avatar size='md' name={user.login} src={user.avatar} />\n                <Text ml='2rem' fontSize='lg'>\n                  {user.login}\n                </Text>\n              </PopoverBody>\n            )\n          })}\n        </PopoverContent>\n      </Popover>\n    </header>\n  )\n}\n\nexport default RoomHeader\n\n// import React from 'react'\n// import styled from 'styled-components'\n// import { BsFillPeopleFill } from 'react-icons/bs'\n// import { css } from '@emotion/react'\n// import ThemeToggler from '../../common/ThemeToggler'\n\n// const RoomTitleStyles = styled.div`\n//   font-size: 1.38rem;\n//   color: rgba(23, 26, 42, 0.7);\n//   justify-self: end;\n// `\n// const RoomPeopleStyles = styled.button`\n//   width: 3.3rem;\n//   height: 2.2rem;\n//   display: flex;\n//   align-items: center;\n//   justify-content: space-between;\n//   color: rgba(23, 26, 42, 0.7);\n//   background-color: #fff;\n\n//   svg {\n//     fill: rgba(23, 26, 42, 0.7);\n\n//     width: 1.2rem;\n//     height: 1.2rem;\n//   }\n// `\n\n// const RoomHeader = () => {\n//   return (\n//     <header\n//       css={css`\n//         box-shadow: 0px 7px 16px 0px rgba(0, 0, 0, 0.71);\n//         display: flex;\n//         align-items: center;\n//         justify-content: center;\n//         padding: 0.62rem;\n//         height: 4.8rem;\n//         width: 100%;\n//       `}\n//     >\n//       <div style={{ flexGrow: 1 }}></div>\n//       <RoomTitleStyles>\n//         <h1># general</h1>\n//       </RoomTitleStyles>\n//       <div style={{ flexGrow: 1 }}></div>\n\n//       <ThemeToggler />\n//     </header>\n//   )\n// }\n\n// export default RoomHeader\n\n// import React from 'react'\n// import { css } from '@emotion/react'\n\n// const UserHeader: React.FC = () => {\n//   return (\n//     <header\n//       css={css`\n//         box-shadow: 0px 7px 16px 0px rgba(0, 0, 0, 0.71);\n//         z-index: 1;\n//         display: flex;\n//         align-items: center;\n//         padding: 1rem;\n//         height: 4.8rem;\n//         color: rgba(23, 26, 42, 0.7);\n//         font-weight: normal;\n//       `}\n//     >\n//       <div>\n//         <h3>Dmitrii</h3>\n//       </div>\n//     </header>\n//   )\n// }\n\n// export default UserHeader\n","/home/dmitrii/github_repos/slack-copy/client/src/redux/serverRoomMessage/utils.ts",["195"],"/home/dmitrii/github_repos/slack-copy/client/src/components/Drawer/Drawer.tsx",["196","197","198","199","200"],"import {\n  Avatar,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Heading,\n  useColorModeValue,\n  useDisclosure,\n} from '@chakra-ui/react'\nimport { css } from '@emotion/react'\nimport React, { RefObject } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport ServerItem from '../../components/ServersList/ServerItem/ServerItem'\nimport {\n  selectUserLogin,\n  selectUserAvatar,\n} from '../../redux/auth/auth.selectors'\nimport {\n  selectCurrentServerTitle,\n  selectServersArr,\n  selectRoomsArr,\n} from '../../redux/serverRoomMessage/serverRoomMessage.selectors'\nimport RoomItem from '../Sidebar/RoomList/RoomItem'\n\ninterface Iprops {\n  btnRef: React.RefObject<HTMLElement>\n  isOpen: boolean\n  onOpen: () => void\n  onClose: () => void\n}\n\nconst DrawerComponent = (props: Iprops) => {\n  const { btnRef, isOpen, onClose } = props\n  const serversBg = useColorModeValue('#A0AEC0', '#171923')\n  const userMenuColor = useColorModeValue('gray.200', 'gray.800')\n\n  const serverTitle = useSelector(selectCurrentServerTitle)\n  const serversArr = useSelector(selectServersArr)\n  const currentRoomsArr = useSelector(selectRoomsArr)\n  const login = useSelector(selectUserLogin)\n  const avatar = useSelector(selectUserAvatar)\n  return (\n    <>\n      <Drawer\n        isOpen={isOpen}\n        placement='left'\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay>\n          <DrawerContent\n            css={css`\n              display: flex;\n              flex-direction: row;\n            `}\n          >\n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                width: 7rem;\n                height: 100vh;\n                background-color: ${serversBg};\n                align-items: center;\n              `}\n            >\n              {serversArr.map((server) => (\n                <ServerItem\n                  key={server._id}\n                  image={server.image}\n                  endpoint={server.endpoint}\n                />\n              ))}\n            </div>\n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n              `}\n            >\n              <DrawerCloseButton />\n              <Heading as='h3' size='lg' ml='2rem' mt='0.5rem'>\n                {serverTitle}\n              </Heading>\n\n              <div\n                css={css`\n                  width: 95%;\n                  height: 50rem;\n                  margin-left: 0.5rem;\n                  margin-top: 1rem;\n                  overflow-y: auto;\n                `}\n              >\n                {currentRoomsArr &&\n                  currentRoomsArr.map((room) => (\n                    <RoomItem\n                      key={room._id}\n                      roomId={room._id}\n                      title={room.roomTitle}\n                    />\n                  ))}\n              </div>\n\n              <Flex\n                mt='auto'\n                shrink={1}\n                h='4rem'\n                bg={userMenuColor}\n                align='center'\n              >\n                <Avatar ml='1.5rem' name={login} src={avatar} />\n                <Heading ml='1.5rem' as='h4' size='md'>\n                  {login}\n                </Heading>\n              </Flex>\n            </div>\n\n            {/* <DrawerHeader>Create your account</DrawerHeader> */}\n\n            {/* <DrawerBody>dick - content</DrawerBody> */}\n\n            {/* <DrawerFooter>footer</DrawerFooter> */}\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  )\n}\n\nexport default DrawerComponent\n","/home/dmitrii/github_repos/slack-copy/client/src/components/common/Modal.tsx",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":2,"column":27,"nodeType":"207","messageId":"208","endLine":2,"endColumn":33},{"ruleId":"201","replacedBy":"209"},{"ruleId":"203","replacedBy":"210"},{"ruleId":"205","severity":1,"message":"211","line":6,"column":10,"nodeType":"207","messageId":"208","endLine":6,"endColumn":27},{"ruleId":"201","replacedBy":"212"},{"ruleId":"203","replacedBy":"213"},{"ruleId":"205","severity":1,"message":"214","line":4,"column":10,"nodeType":"207","messageId":"208","endLine":4,"endColumn":21},{"ruleId":"205","severity":1,"message":"215","line":8,"column":10,"nodeType":"207","messageId":"208","endLine":8,"endColumn":22},{"ruleId":"205","severity":1,"message":"216","line":1,"column":32,"nodeType":"207","messageId":"208","endLine":1,"endColumn":37},{"ruleId":"201","replacedBy":"217"},{"ruleId":"203","replacedBy":"218"},{"ruleId":"205","severity":1,"message":"219","line":1,"column":47,"nodeType":"207","messageId":"208","endLine":1,"endColumn":52},{"ruleId":"220","severity":1,"message":"221","line":19,"column":6,"nodeType":"222","endLine":19,"endColumn":8,"suggestions":"223"},{"ruleId":"205","severity":1,"message":"224","line":3,"column":19,"nodeType":"207","messageId":"208","endLine":3,"endColumn":23},{"ruleId":"205","severity":1,"message":"225","line":4,"column":10,"nodeType":"207","messageId":"208","endLine":4,"endColumn":13},{"ruleId":"205","severity":1,"message":"214","line":3,"column":23,"nodeType":"207","messageId":"208","endLine":3,"endColumn":34},{"ruleId":"205","severity":1,"message":"226","line":81,"column":9,"nodeType":"207","messageId":"208","endLine":81,"endColumn":27},{"ruleId":"205","severity":1,"message":"227","line":5,"column":10,"nodeType":"207","messageId":"208","endLine":5,"endColumn":27},{"ruleId":"205","severity":1,"message":"228","line":6,"column":3,"nodeType":"207","messageId":"208","endLine":6,"endColumn":7},{"ruleId":"229","severity":1,"message":"230","line":5,"column":40,"nodeType":"231","messageId":"232","endLine":5,"endColumn":42},{"ruleId":"205","severity":1,"message":"233","line":4,"column":3,"nodeType":"207","messageId":"208","endLine":4,"endColumn":13},{"ruleId":"205","severity":1,"message":"234","line":7,"column":3,"nodeType":"207","messageId":"208","endLine":7,"endColumn":15},{"ruleId":"205","severity":1,"message":"235","line":8,"column":3,"nodeType":"207","messageId":"208","endLine":8,"endColumn":15},{"ruleId":"205","severity":1,"message":"236","line":13,"column":3,"nodeType":"207","messageId":"208","endLine":13,"endColumn":16},{"ruleId":"205","severity":1,"message":"237","line":16,"column":17,"nodeType":"207","messageId":"208","endLine":16,"endColumn":26},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"@typescript-eslint/no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar",["238"],["239"],"'useColorModeValue' is defined but never used.",["238"],["239"],"'useSelector' is defined but never used.","'selectUserId' is defined but never used.","'Image' is defined but never used.",["238"],["239"],"'IUser' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ws'. Either include it or remove the dependency array.","ArrayExpression",["240"],"'Text' is defined but never used.","'css' is defined but never used.","'userDataFromServer' is assigned a value but never used.","'removeUserFromArr' is defined but never used.","'Flex' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'DrawerBody' is defined but never used.","'DrawerFooter' is defined but never used.","'DrawerHeader' is defined but never used.","'useDisclosure' is defined but never used.","'RefObject' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"241","fix":"242"},"Update the dependencies array to be: [ws]",{"range":"243","text":"244"},[732,734],"[ws]"]